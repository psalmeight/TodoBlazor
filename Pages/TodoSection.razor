@using TodoBlazor.Data
@inject TodoRowService TodoService

@if (todoList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <input type="text" @onkeyup="AddToRow" @bind="inputValue" />

    @foreach (var todo in FilteredTodoList())
    {
        <div class="todo-row">
            <input type="checkbox" @onchange="eventArg => { OnCheck(todo.Id, eventArg.Value); }" checked="@(todo.Status == "complete")"/>
            <div style="@Validate(todo.Status)">
                @todo.Text
            </div>
        </div>
    }

    <div class="todo-footer">

        <h2>@appState.PendingCount item left</h2>

        @foreach (var filter in filters)
        {
            <button @onclick="() => OnFilterSelected(filter)">@filter</button>
        }

        <button @onclick="ClearCompleted">Clear Completed</button>

    </div>
}

@code {

    private AppState appState = new AppState();
    private List<TodoRow> todoList;

    string[] filters = { "all", "active", "completed" };
    private string inputValue;

    protected override async Task<List<TodoRow>> OnInitializedAsync()
    {
        todoList = await TodoService.GetObservableRows();

        appState.PendingCount = todoList.Count();
        appState.Filter = "all";
        appState.CurrentText = "";

        return new();
    }

    public string Validate(string status)
    {
        if (status == "complete")
            return "text-decoration: line-through";

        return "text-decoration: none";
    }

    public void AddToRow(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (!string.IsNullOrWhiteSpace(inputValue))
            {
                todoList.Add(new TodoRow(todoList.Count + 1, "pending", inputValue));
                inputValue = string.Empty;
            }
        }
    }

    public void OnCheck(int Id, object Checked)
    {
        todoList.ToList<TodoRow>().ForEach(delegate (TodoRow todo)
        {
            if (todo.Id == Id)
            {
                todo.Status = (bool)Checked ? "complete" : "pending";
            }
        });

        appState.PendingCount = todoList.Where(x => x.Status == "pending").Count();
    }

    public void OnFilterSelected(string filter)
    {
        appState.Filter = filter;
    }

    public List<TodoRow> FilteredTodoList()
    {
        if (appState.Filter == "active")
            return todoList.Where(x => x.Status == "pending").ToList();
        else if (appState.Filter == "completed")
            return todoList.Where(x => x.Status == "complete").ToList();

        return todoList.ToList();
    }

    public void ClearCompleted()
    {
        todoList = todoList.Where(x => x.Status == "pending").ToList();
    }

}
